int f1(int n) {                   // COST   TIMES
  int i = 1;                      // c1     1
  for (int j = 1;                 // c2     1
                j <= n;           // c3     n + 1
                        j++) {    // c4     n + 1
    i = i * j;                    // c5     n
  }
  return i;                       // c6     1
}
O(n)


int f2(int m, unsigned int n) {        // COST   TIMES
  for (int i = 0;                      // c1     1
                i < 2 * m;             // c2     n * 2 + 1
                           i++) {      // c3     n * 2 + 1
    for (int j = n;                    // c4     n * 2 + 1
                    j > 0;             // c5     n * 2 + 1
                           j--) {      // c6     n * 2 + 1
      return j;                        // c7     1
    }
  }
  return 0;                            // c8     1
}
O(n)

void f3(int n) {                          // COST   TIMES
  for (int i = 0;                         // c1     1
                i < n;                    // c2     n + 1
                       i++) {             // c3     n + 1
    for (int j = 10;                      // c4     n + 1 + 10
                   j >= 0;                // c5     n + 1 + 10
                           j--) {         // c6     n + 1 + 10
      System.out.print("i = " + i);       // c7     n + 1 + 10
      System.out.println(", j = " + j);   // c8     n + 1 + 10
    }
  }
}
O(n)


2.
int g(int n) {
  int x = g(n - 1);
  if (x > 0) {
    return x + 1;
  } else {
    return 1;
  }
}
The program will get stuck because it does not make progress
Towards a base case and keeps calling itself minus 1

3.
There will be more nulls than child one node has two children
Each non null child will either have another non null child or
one or two null children
 r
n n
 
   r
 c   c
n n n n
 
c is child
n is null
r is root

4.
2.11
(a) 2.5ms
(b) 3.478ms
(c) 12.5ms
(d) 62.5ms

5.
2.12
(a) 12 million
(b) 582,209
(c) 3,464
(d) 228

6.
  yes because the program will keep being run and more functions
  and variables will be added to the stack and then we will get a
  'stackoverflow' error thats where the website gets its name from

7. 3.36
  copy the next nodes value in the current node
  then get the next node's next node
  then make the current node point to that node
  this will be constant time because it will always use 
  the same number of steps